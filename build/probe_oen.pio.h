// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ----- //
// probe //
// ----- //

#define probe_wrap_target 7
#define probe_wrap 14

#define probe_offset_turnaround_cmd 0u
#define probe_offset_write_cmd 4u
#define probe_offset_get_next_cmd 7u
#define probe_offset_read_cmd 12u

static const uint16_t probe_program_instructions[] = {
    0x80a0, //  0: pull   block                      
    0xb542, //  1: nop                    side 1 [1] 
    0x1d41, //  2: jmp    x--, 1          side 3 [1] 
    0x0007, //  3: jmp    7                          
    0x80a0, //  4: pull   block                      
    0x7101, //  5: out    pins, 1         side 0 [1] 
    0x1945, //  6: jmp    x--, 5          side 2 [1] 
            //     .wrap_target
    0x94a0, //  7: pull   block           side 1     
    0x6028, //  8: out    x, 8                       
    0x6081, //  9: out    pindirs, 1                 
    0x60a5, // 10: out    pc, 5                      
    0xa042, // 11: nop                               
    0x5d01, // 12: in     pins, 1         side 3 [1] 
    0x144b, // 13: jmp    x--, 11         side 1     
    0x8020, // 14: push   block                      
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program probe_program = {
    .instructions = probe_program_instructions,
    .length = 15,
    .origin = -1,
};

static inline pio_sm_config probe_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + probe_wrap_target, offset + probe_wrap);
    sm_config_set_sideset(&c, 3, true, false);
    return c;
}

static inline void probe_gpio_init()
{
#if defined(PROBE_PIN_RESET)
    // Target reset pin: pull up, input to emulate open drain pin
    gpio_pull_up(PROBE_PIN_RESET);
    // gpio_init will leave the pin cleared and set as input
    gpio_init(PROBE_PIN_RESET);
#endif
    // Funcsel pins
    pio_gpio_init(pio0, PROBE_PIN_SWDIOEN);
    pio_gpio_init(pio0, PROBE_PIN_SWCLK);
    pio_gpio_init(pio0, PROBE_PIN_SWDIO);
    // Make sure SWDIO has a pullup on it. Idle state is high
    gpio_pull_up(PROBE_PIN_SWDIO);
    gpio_pull_up(PROBE_PIN_SWDIOEN);
}
static inline void probe_sm_init(pio_sm_config* sm_config) {
    // Set SWDIOEN and SWCLK as sideset pins
    sm_config_set_sideset_pins(sm_config, PROBE_PIN_SWDIOEN);
    // Set SWDIO offset
    sm_config_set_out_pins(sm_config, PROBE_PIN_SWDIO, 1);
    sm_config_set_set_pins(sm_config, PROBE_PIN_SWDIO, 1);
    sm_config_set_in_pins(sm_config, PROBE_PIN_SWDI);
    // Set SWDIOEN, SWD and SWDIO pins as output to start. This will be set in the sm
    pio_sm_set_consecutive_pindirs(pio0, PROBE_SM, PROBE_PIN_OFFSET, 3, true);
    // shift output right, autopull off, autopull threshold
    sm_config_set_out_shift(sm_config, true, false, 0);
    // shift input right as swd data is lsb first, autopush off
    sm_config_set_in_shift(sm_config, true, false, 0);
}

#endif

